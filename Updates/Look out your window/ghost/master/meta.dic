//—————————————————————————————— Network Update ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnUpdateBegin

OnUpdateBegin
{
	"[Checking for updates.]\w8"
}

//reference0 is the number of new files, starting from 0
OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	
	//plural checks, adds an s and changes is to are if there's more than 1 file
	_s = ""; _are = "is"
	if reference0 != 1; {_s = "s"; _are = "are"}
	
	"[There %(_are) %(reference0) new file%(_s).]\w8"
}

//When the update finishes. Don't forget to initialize any new variables you've created! I highly highly recommend using OnInitialize for this (it's in boot.dic), in case the user updates via the ghost explorer or some other means.
//reference0 is 'none' if there were no new files to update with
OnUpdateComplete
{
	if reference0 == "none"
	{
		"[There are no new files.]"
	}
	else
	{
		"[Update complete.]"
	}
}

OnUpdateFailure
{	
	_file = SPLITPATH(reference1)[2] + SPLITPATH(reference1)[3] //For MD5 errors, this gets the name and extension of the offending file
	_reason = reference0
	case reference0
	{
		when "timeout"; _reason = "connection timed out"
		when "md5 miss"; _reason = "MD5 error on file %(_file)\n\nPlease contact the ghost author for assistance"
		when "artificial"; _reason = "canceled by user"
	}
	"[Could not update: %(_reason).]"
}


//———————————————————————————————— Headlines/RSS ——————————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnHeadlinesenseBegin

OnHeadlinesenseFailure
{
	_reason = reference0
	case reference0
	{
		when "can't download"; _reason = "can't download the file"
		when "can't analyze"; _reason = "can't analyze the file"
	}

	"[Could not get RSS: %(_reason).]"
}

//Network update url. Make sure you have a / on the end of the url or it will give a warning every time users try to update! If you don't plan to use network updates you can remove this
//IF YOU'RE USING GITHUB FOR NETWORK UPDATES: DO NOT USE github.io URLS! It will cause you pain and suffering. USE raw.githubusercontent!!!
//To get the raw.githubusercontent link super easy:
//• Open your ghost's repo online
//• navigate to the ghost's folder (the top level one, with install.txt, readme.txt, etc)
//• Click on install.txt, or another text file on that level
//• Once on that page, click the "raw" button. You should see the url now starts with raw.githubusercontent
//• Copy that url exactly as is, but *leave off the "install.txt" or whatever file name at the end.*
//Tada! That's your url! Make sure you test it! The dev palette and script/network log can help with that
On_homeurl
{
	""
}


//—————————————————————————————— Creating a .nar file ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnNarCreating

OnNarCreated
{
	//Makes a clickable link that'll open the location of the file they just made
	_nar = "\_a[OnNarLocation,""%(reference1)""]%(reference0)\_a"
	
	"[Successfully created %(_nar).]"
}

OnNarLocation
{
	"\![open,explorer,""%(reference0)""]"
}


//—————————————————————————————— Installing something ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnInstallBegin

OnInstallComplete
{
	"[Installed %(reference1) (%(reference0)).]"
	--
	//A little menu to open or change to the ghost that was installed immediately
	if "ghost" _in_ reference0
	{
		"\n\n\_q"
		--
		"\![*]\__q[OnInstallComplete.Action,call]Call %(reference0)\__q  \![*]\__q[OnInstallComplete.Action,change]Change to %(reference0)\__q\n\n"
		--
		"\![*]\q[Done,blank]"
	}
}

OnInstallComplete.Action
{
	if reference0 == "change"
	{
		"\![change,ghost,lastinstalled]"
	}
	else
	{
		"\![call,ghost,lastinstalled]"
	}
}

OnInstallFailure
{
	_reason = reference0
	case reference0
	{
		when "unlha32"; _reason = "could not load the dll to decompress lzh files"
		when "extraction"; _reason = "failed to decompress the file"
		when "invalid type"; _reason = "the install.txt is incorrect"
		when "unsupported"; _reason = "the archive is not supported"
		when "password"; _reason = "incorrect password"
		when "artificial"; _reason = "canceled by user"
	}
	
	"[Could not complete installation: %(_reason).]"
}


//—————————————————————————————— SNTP (clock fixing) ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnSNTPBegin

OnSNTPCompare
{
	if reference3 != 0
	{
		_s = ""; if reference3 != 1; _s = "s"
		
		"[The clock is off by %(reference3) second%(_s).]\n\n"
		--
		"\![*]\q[Fix it,script:\6]  \![*]\q[Leave it,blank]"
	}
	else
	{
		"[The clock is accurate.]"
	}
}

OnSNTPCorrect
{
	"[The clock has been corrected.]"
}

OnSNTPFailure
{
	"[Could not correct the clock.]"
}


//—————————————————————————————— BIFF (Email check) ———————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnBIFFBegin

OnBIFFFailure
{
	_reason = reference0
	case reference0
	{
		when "timeout"; _reason = "connection timed out"
		when "kick"; _reason = "can't access account"
		when "defect"; _reason = "POP settings incorrect"
		when "artificial"; _reason = "canceled by user"
	}

	"[Could not get emails: %(_reason).]"
}